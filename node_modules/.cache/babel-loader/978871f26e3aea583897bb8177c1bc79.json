{"ast":null,"code":"import { App } from 'vue';\nimport upperFirst from 'lodash/upperFirst';\nimport camelCase from 'lodash/camelCase'; // const requireComponent = require.context(\n//   // The relative path of the components folder './'\n//   '.',\n//   // Whether or not to look in subfolders\n//   true,\n//   // The regular expression used to match base component filenames\n//   /[A-Z]\\w+Base\\.vue$/,\n//   // /base-[\\w-]+\\.vue$/,\n// );\n// console.log(requireComponent);\n// // const register = (app: App<Element>): void => {\n// //   requireComponent.keys().forEach((fileName) => {\n// //     // Get component config\n// //     const componentConfig = requireComponent(fileName);\n// //     // Get component name\n// //     const componentName = fileName.split('/').pop()?.replace(/\\.\\w+$/, '') as string;\n// //     app.component(componentName, componentConfig.default || componentConfig);\n// //   });\n// const register = () => {\n//   requireComponent.keys().forEach(fileName => {\n//     const componentConfig = requireComponent(fileName);\n//     console.log(componentConfig.default);\n//     // Gets the file name regardless of folder depth\n//     // const componentName = fileName\n//     //   .split(\"/\")\n//     //   .pop()\n//     //   .split(\".\")[0];\n//     // register the component locally\n//     const componentName = upperFirst(camelCase(fileName.replace(/^\\.\\//,'').replace(/\\.\\w+$/,'')));\n//     console.log(componentName);\n//     App.component(componentName, componentConfig.default || componentConfig);\n//   });\n// };\n//   export default {\n//     register,\n//   };\n\nconst requireComponent = require.context( // The relative path of the components folder\n'./', // Whether or not to look in subfolders\nfalse, // The regular expression used to match base component filenames\n/[A-Z]\\w+Base\\.vue$/);\n\nconsole.log(requireComponent);\n\nconst register = () => {\n  requireComponent.keys().forEach(fileName => {\n    // Get component config\n    const componentConfig = requireComponent(fileName); // Get component name\n\n    const componentName = fileName.split('/').pop()?.replace(/\\.\\w+$/, '');\n    app.component(componentName, componentConfig.default || componentConfig);\n  });\n};\n\nexport default {\n  register\n};","map":{"version":3,"names":["App","upperFirst","camelCase","requireComponent","require","context","console","log","register","keys","forEach","fileName","componentConfig","componentName","split","pop","replace","app","component","default"],"sources":["F:/soft/src/layout/base/index.js"],"sourcesContent":["import { App } from 'vue';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport camelCase from 'lodash/camelCase';\r\n\r\n// const requireComponent = require.context(\r\n//   // The relative path of the components folder './'\r\n//   '.',\r\n//   // Whether or not to look in subfolders\r\n//   true,\r\n//   // The regular expression used to match base component filenames\r\n//   /[A-Z]\\w+Base\\.vue$/,\r\n//   // /base-[\\w-]+\\.vue$/,\r\n// );\r\n// console.log(requireComponent);\r\n\r\n// // const register = (app: App<Element>): void => {\r\n// //   requireComponent.keys().forEach((fileName) => {\r\n// //     // Get component config\r\n// //     const componentConfig = requireComponent(fileName);\r\n// //     // Get component name\r\n// //     const componentName = fileName.split('/').pop()?.replace(/\\.\\w+$/, '') as string;\r\n\r\n// //     app.component(componentName, componentConfig.default || componentConfig);\r\n// //   });\r\n\r\n// const register = () => {\r\n//   requireComponent.keys().forEach(fileName => {\r\n//     const componentConfig = requireComponent(fileName);\r\n//     console.log(componentConfig.default);\r\n//     // Gets the file name regardless of folder depth\r\n//     // const componentName = fileName\r\n//     //   .split(\"/\")\r\n//     //   .pop()\r\n//     //   .split(\".\")[0];\r\n//     // register the component locally\r\n\r\n//     const componentName = upperFirst(camelCase(fileName.replace(/^\\.\\//,'').replace(/\\.\\w+$/,'')));\r\n//     console.log(componentName);\r\n//     App.component(componentName, componentConfig.default || componentConfig);\r\n//   });\r\n\r\n// };\r\n\r\n\r\n//   export default {\r\n//     register,\r\n//   };\r\n\r\nconst requireComponent = require.context(\r\n  // The relative path of the components folder\r\n  './',\r\n  // Whether or not to look in subfolders\r\n  false,\r\n  // The regular expression used to match base component filenames\r\n  /[A-Z]\\w+Base\\.vue$/,\r\n);\r\n\r\nconsole.log(requireComponent);\r\n\r\nconst register = () => {\r\n  requireComponent.keys().forEach((fileName) => {\r\n    // Get component config\r\n    const componentConfig = requireComponent(fileName);\r\n    // Get component name\r\n    const componentName = fileName.split('/').pop()?.replace(/\\.\\w+$/, '');\r\n\r\n    app.component(componentName, componentConfig.default || componentConfig);\r\n  });\r\n};\r\n\r\nexport default {\r\n  register,\r\n};"],"mappings":"AAAA,SAASA,GAAT,QAAoB,KAApB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,OAAR,EACvB;AACA,IAFuB,EAGvB;AACA,KAJuB,EAKvB;AACA,oBANuB,CAAzB;;AASAC,OAAO,CAACC,GAAR,CAAYJ,gBAAZ;;AAEA,MAAMK,QAAQ,GAAG,MAAM;EACrBL,gBAAgB,CAACM,IAAjB,GAAwBC,OAAxB,CAAiCC,QAAD,IAAc;IAC5C;IACA,MAAMC,eAAe,GAAGT,gBAAgB,CAACQ,QAAD,CAAxC,CAF4C,CAG5C;;IACA,MAAME,aAAa,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoBC,GAApB,IAA2BC,OAA3B,CAAmC,QAAnC,EAA6C,EAA7C,CAAtB;IAEAC,GAAG,CAACC,SAAJ,CAAcL,aAAd,EAA6BD,eAAe,CAACO,OAAhB,IAA2BP,eAAxD;EACD,CAPD;AAQD,CATD;;AAWA,eAAe;EACbJ;AADa,CAAf"},"metadata":{},"sourceType":"module"}